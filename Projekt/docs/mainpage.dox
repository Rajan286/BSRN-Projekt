/**
 * @mainpage SLCP-Chat Programm – Detaillierte Dokumentation
 *
 * @section intro Einführung
 * Dieses Projekt implementiert einen dezentralen Chat-Client basierend auf
 * dem Simple Local Chat Protocol (SLCP). Ziel ist eine Peer-to-Peer-Kommunikation
 * ohne zentralen Server, die Text- und Bildnachrichten im lokalen Netzwerk ermöglicht.
 *
 * @section goals Projektziele
 * - Vollständige Umsetzung des SLCP-Protokolls: JOIN, LEAVE, WHO, KNOWUSERS, MSG, IMG, WHOIS
 * - Dezentrale Discovery mittels Broadcast und lokaler Discovery-Dienste
 * - Klare Trennung der Funktionalität in drei Prozesse:
 *   - Benutzeroberfläche (ui.py)
 *   - Netzwerk-Modul (network.py, peer.py)
 *   - Discovery-Dienst (discovery.py)
 * - Konfiguration per TOML-Datei, editierbar über CLI
 * - Robustheit: Wiederverwendbarer Port-Finder, Named Pipes (FIFO), Signal-Handling
 *
 * @section arch Architektur
 * Die Software-Architektur besteht aus drei Hauptkomponenten:
 * - Discovery-Dienst: Beantwortet WHO-Anfragen, verwaltet aktive Peers, kommuniziert über UDP
 * - Netzwerk-Modul: Sendet/empfängt SLCP-Nachrichten per UDP/TCP, verarbeitet JOIN/LEAVE/MSG/IMG/WHOIS
 * - Benutzeroberfläche: CLI-Interface, leitet Befehle an Netzwerk-Modul weiter und zeigt Nachrichten
 *
 * Kommunikation erfolgt über:
 * - UDP-Broadcast (entweder 255.255.255.255 oder lokale Broadcast-Adresse, z.B. 192.168.178.255:whoisport) für Discovery
 * - TCP-Unicast für Direktnachrichten (MSG, IMG) und WHOIS
 * - Named Pipes (FIFO) für IPC zwischen UI und Netzwerkmodul
 *
 * @section config Konfiguration
 * Die zentrale Konfigurationsdatei `config.toml` enthält folgende Parameter:
 * @li handle    Benutzername des Clients
 * @li port      Start-Port für lokale UDP-/TCP-Sockets
 * @li whoisport UDP-Port für Discovery-Broadcasts
 * @li autoreply Automatische Abwesenheits-Antwort (leer = deaktiviert)
 * @li imagepath Verzeichnis zum Speichern empfangener Bilder
 *
 * Optional: zweite Konfiguration (auch `config.toml`) zum schnellen Wechsel des Handles
 * und Ports (Ordner: User2).
 *
 * @section aufgetretene Fehler
 * Während der Entwicklung traten folgende Probleme auf:
 * - **ConfigNotFound**: Konfigurationsdatei nicht gefunden – Lösung: Prüfe den Pfad, nutze `--config`-Parameter oder setze Umgebungsvariable für den richtigen Pfad.
 * - **FIFOPermission**: Keine Berechtigung für FIFO-Erstellung oder -Zugriff – Lösung: Stelle sicher, dass das Verzeichnis `PIPE_DIR` existiert und du Schreibrechte hast.
 * - **BrokenPipe**: BrokenPipe-Fehler beim Schreiben in FIFO – Lösung: Vor dem Schreiben prüfen, ob Leser aktiv, oder BrokenPipe mit Retry/Timeout abfangen.
 * - **UDPBlocked**: UDP-Broadcast blockiert (z.B. macOS Restriktionen) – Lösung: Verwende lokale Broadcast-Adresse (z.B. `192.168.178.255`)
 * - **PortInUse**: Socket-Bind-Fehler (Port bereits belegt) – Lösung: Nutze `get_available_port()` aus `common.py` oder wähle einen anderen Startport in der Konfiguration.
 * - **TCPTimeout**: Timeout beim TCP-Verbindungsaufbau oder -Akzeptieren – Lösung: Setze sinnvolle Socket-Timeouts (`settimeout`) und fange `socket.timeout` ab.
 * - **InvalidCommand**: Unbekannte oder ungültige SLCP-Befehle empfangen – Lösung: Überprüfe Eingaben gegen erlaubte Befehle und logge Warnungen bei ungültigen Nachrichten.
 * - **PartialImage**: Teilweiser oder unvollständiger Bildempfang – Lösung: Vergleiche empfangene Bytes mit angegebener Größe und verwirf unvollständige Dateien oder bitte um erneute Sendung.
 * - **SignalHandlerFail**: Signalhandler nicht korrekt registriert – Lösung: Stelle sicher, dass `signal.signal()` vor `start()` aufgerufen wird und verwende `trap` im Startskript.
 * - **IPCError**: Fehler bei der Interprozesskommunikation via FIFO – Lösung: Fange IPC-Ausnahmen ab, logge Fehler und erstelle fehlende Pipes automatisch.
 * - **WinError 10488**:jede Socketadresse darf nur jeweils einmal geöffnet werden - Lösung:Jeweiliges Terminal schließen und neu starten
 * - **Your branch is behind**: Andere Mitglieder haben comittet und man selber hat nicht gepullt - Lösung: git pull im Terminal eingeben.
 * - **TypeError**: type ´DiscoveryService' is not subscriptable - Lösung: Objekte in Liste angeben.
 *
 * Screenshots einbinden (in `docs/Bilder`):
 * ```
 * \Bilder html Discovery_bereits_gestartet.png "2 Discovery Terminals gestartet und versucht mit beiden zu lauschen"
 * \Bilder html Noch_nicht_gepullt.png "Noch nicht gepullt bevor man was comittet"
 * \Bilder html User_Falsch_pbergeben.png "Discovery Objekt wollte die User als Liste. Falsch übergeben"
 * \Bilder html TOML_Downloaden.png "Library wurde nicht heruntergeladen"
 * ```
 *
 * @section flow Flussdiagramm der Hosts
 * Ablauf auf zwei Hosts im selben WLAN:
 * - Host A:
 *   1. `python3 discovery.py config.toml` (Terminal 1)
 *   2. `python3 network.py config.toml`   (Terminal 2)
 *   3. `python3 ui.py`                   (Terminal 3)
 * - Host B analog mit seiner eigenen `config.toml`
 *
 * Kommunikation:
 * - UDP-Broadcast WHO → alle Discovery-Dienste
 * - UDP-Unicast KNOWUSERS → an anfragenden Host
 * - TCP-Unicast MSG/IMG/WHOIS → zwischen Peers
 * - FIFO UI→Net, FIFO Net→UI für IPC
 *
 * @dot
 * digraph SLCP2Hosts {
 *   rankdir=LR;
 *   node [shape=box, style=rounded, fontname="Helvetica"];
 *   subgraph cluster_A {
 *     label="Host A"; style=dashed;
 *     A1 [label="Terminal 1:\npython3 discovery.py config.toml"];
 *     A2 [label="Terminal 2:\npython3 network.py config.toml"];
 *     A3 [label="Terminal 3:\npython3 ui.py"];
 *   }
 *   subgraph cluster_B {
 *     label="Host B"; style=dashed;
 *     B1 [label="Terminal 1:\npython3 discovery.py config.toml"];
 *     B2 [label="Terminal 2:\npython3 network.py config.toml"];
 *     B3 [label="Terminal 3:\npython3 ui.py"];
 *   }
 *   A1 -> B1 [label="UDP Broadcast WHO", arrowhead=none];
 *   B1 -> A1 [label="UDP Reply KNOWUSERS", style=dotted, arrowhead=none];
 *   A2 -> B2 [label="TCP MSG/IMG/WHOIS"];
 *   B2 -> A2 [label="TCP MSG/IMG/WHOIS"];
 *   A3 -> A2 [label="FIFO UI→Net"];
 *   A2 -> A3 [label="FIFO Net→UI"];
 *   B3 -> B2 [label="FIFO UI→Net"];
 *   B2 -> B3 [label="FIFO Net→UI"];
 * }
 *
 * @section authors Autoren
 * - Rajan Kakkar (1538362)
 * - Zufar Reyal (1417498)
 * - Soufian Kenbouche (1574324)
 * - Bileya Karimou (1570665)
 * - Yasmin Hammouni (1514652)
 * @enddot
 */


